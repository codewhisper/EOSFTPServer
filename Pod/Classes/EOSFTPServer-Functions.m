/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * file             ...
 * @author          Jean-David Gadina - www.xs-labs.com
 * @copyright       (c) 2012, XS-Labs
 * @abstract        ...
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/sockio.h>
#include <net/if.h>
#include <errno.h>
#include <net/if_dl.h>
#include <ifaddrs.h>
#include "EOSFTPServer-Functions.h"

#define __IFREQ_BUF_SIZE    100

int get_ip_address( const int domain, const char * iface, char * buf )
{
    struct ifconf        ifconf;
    struct ifreq         ifr[ __IFREQ_BUF_SIZE ];
    struct sockaddr_in   s_in;
    size_t               ifs;
    size_t               i;
    int                  s;
    char                 ip[ INET_ADDRSTRLEN ];
    
    memset( buf, 0, INET_ADDRSTRLEN );
    
    {
        struct ifaddrs * addrs;
        struct ifaddrs * cur;
        
        if( getifaddrs( &addrs ) < 0 )
        {
            return 1;
        }
        
        for( cur = addrs; cur != NULL; cur = cur->ifa_next )
        {
            if( cur->ifa_addr->sa_family != AF_INET )
            {
                continue;
            }
            
            if( ( cur->ifa_flags & IFF_UP ) == 0 )
            {
                continue;
            }
            
            memcpy( &s_in, cur->ifa_addr, sizeof( struct sockaddr_in ) );
    
            if( strcmp( cur->ifa_name, iface ) == 0 )
            {
                strcpy( buf, inet_ntoa( s_in.sin_addr ) );
                freeifaddrs( addrs );
                
                return 0;
            }

        }
        
        freeifaddrs( addrs );
    }
    
    s = socket( domain, SOCK_STREAM, 0 );
    
    if( s < 0 )
    {
        return 1;
    }
    
    ifconf.ifc_buf = ( char * )ifr;
    ifconf.ifc_len = __IFREQ_BUF_SIZE * sizeof( struct ifreq );
    
    if( ioctl( s, SIOCGIFCONF, &ifconf ) == -1 )
    {
        return 1;
    }
    
    ifs = ( size_t )( ifconf.ifc_len ) / sizeof( struct ifreq );
    
    for( i = 0; i < ifs; i++ )
    {
        if( ( ifr[ i ].ifr_flags & IFF_UP ) == 0 )
        {
            continue;
        }
        
        memcpy( &s_in, &( ifr[ i ].ifr_addr ), sizeof( struct sockaddr_in ) );
        
        if( inet_ntop( domain, &s_in.sin_addr, ip, INET_ADDRSTRLEN ) == NULL )
        {
            continue;
        }
        
        if( strcmp( ifr[ i ].ifr_name, iface ) == 0 )
        {
            strcpy( buf, ip );
            close( s );
            
            return 0;
        }
    }
    
    close( s );
    
    return 1;
}
