/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file            ...
 * @author          Jean-David Gadina - www.xs-labs.com
 * @copyright       (c) 2012, XS-Labs
 * @abstract        ...
 */

#import "EOSFTPServerUser.h"
#import "NSString+EOS.h"

NSString * const EOSFTPServerUserException = @"EOSFTPServerUserException";

@implementation EOSFTPServerUser

@synthesize name = _name;

+ ( EOSFTPServerUser * )userWithName: ( NSString * )name
{
    EOSFTPServerUser * user;
    
    user = [ [ EOSFTPServerUser alloc ] initWithName: name ];
    
    return [ user autorelease ];}

+ ( EOSFTPServerUser * )userWithName: ( NSString * )name password: ( NSString * )password
{
    EOSFTPServerUser * user;
    
    user = [ [ EOSFTPServerUser alloc ] initWithName: name password: password ];
    
    return [ user autorelease ];}

+ ( EOSFTPServerUser * )userWithName: ( NSString * )name md5Password: ( NSString * )md5Password
{
    EOSFTPServerUser * user;
    
    user = [ [ EOSFTPServerUser alloc ] initWithName: name md5Password: md5Password ];
    
    return [ user autorelease ];
}

- ( id )initWithName: ( NSString * )name
{
    if( ( self = [ self init ] ) )
    {
        if( name == nil || name.length == 0 )
        {
            @throw [ NSException exceptionWithName: EOSFTPServerUserException reason: @"No username provided" userInfo: nil ];
        }
        
        _name = [ name copy ];
    }
    
    return self;
}

- ( id )initWithName: ( NSString * )name password: ( NSString * )password
{
    if( ( self = [ self init ] ) )
    {
        if( name == nil || name.length == 0 )
        {
            @throw [ NSException exceptionWithName: EOSFTPServerUserException reason: @"No username provided" userInfo: nil ];
        }
        
        _name     = [ name copy ];
        _password = [ password copy ];
    }
    
    return self;
}

- ( id )initWithName: ( NSString * )name md5Password: ( NSString * )md5Password
{
    if( ( self = [ self init ] ) )
    {
        if( name == nil || name.length == 0 )
        {
            @throw [ NSException exceptionWithName: EOSFTPServerUserException reason: @"No username provided" userInfo: nil ];
        }
        
        _name        = [ name copy ];
        _md5Password = [ md5Password copy ];
    }
    
    return self;
}

- ( void )dealloc
{
    [ _name        release ];
    [ _password    release ];
    [ _md5Password release ];
    
    [ super dealloc ];
}

- ( BOOL )isEqual: ( id )object
{
    EOSFTPServerUser * user;
    
    if( [ object isKindOfClass: [ EOSFTPServerUser class ] ] )
    {
        return NO;
    }
    
    user = ( EOSFTPServerUser * )object;
    
    if( [ _name isEqualToString: user.name ] == NO )
    {
        return NO;
    }
    
    return YES;
}

- ( NSUInteger )hash
{
    NSString * credidentials;
    NSString * password;
    
    if( _md5Password != nil )
    {
        password = _md5Password;
    }
    else
    {
        password = [ _password md5Hash ];
    }
    
    credidentials = [ NSString stringWithFormat: @"%@:%@", _name, password ];
    
    return [ credidentials crc32 ];
}

- ( NSString * )password
{
    @synchronized( self )
    {
        return _password;
    }
}

- ( NSString * )md5Password
{
    @synchronized( self )
    {
        return _md5Password;
    }
}

- ( void )setPassword: ( NSString * )password
{
    @synchronized( self )
    {
        [ _password    release ];
        [ _md5Password release ];
        
        _password    = [ password copy ];
        _md5Password = nil;
    }
}

- ( void )setMd5Password: ( NSString * )md5Password
{
    @synchronized( self )
    {
        [ _password    release ];
        [ _md5Password release ];
        
        _password    = nil;
        _md5Password = [ md5Password copy ];
    }
}

@end
